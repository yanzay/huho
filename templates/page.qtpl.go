// This file is automatically generated by qtc from "page.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line templates/page.qtpl:1
package templates

//line templates/page.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line templates/page.qtpl:1
import "github.com/yanzay/teslo/templates"

//line templates/page.qtpl:3
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line templates/page.qtpl:3
func StreamPage(qw422016 *qt422016.Writer, state State) {
	//line templates/page.qtpl:3
	qw422016.N().S(`
<!DOCTYPE html>
<html lang="en">
<head>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
</head>
<body id="app">
    <nav class="navbar navbar-inverse">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Hugo Hosting</a>
        </div>
        <div id="navbar" class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li class="active"><a href="#">Home</a></li>
            <li><a href="#about">About</a></li>
            <li><a href="#contact">Contact</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>

    <div class="container">
      <div>
        `)
	//line templates/page.qtpl:33
	if state.Login == "" {
		//line templates/page.qtpl:33
		qw422016.N().S(`
        <a href="`)
		//line templates/page.qtpl:34
		qw422016.E().S(state.GithubURL)
		//line templates/page.qtpl:34
		qw422016.N().S(`">Log in with github</a>
        `)
		//line templates/page.qtpl:35
	} else {
		//line templates/page.qtpl:35
		qw422016.N().S(`
        <p>Logged in as `)
		//line templates/page.qtpl:36
		qw422016.E().S(state.Login)
		//line templates/page.qtpl:36
		qw422016.N().S(`</p>
        `)
		//line templates/page.qtpl:37
	}
	//line templates/page.qtpl:37
	qw422016.N().S(`
      </div>

    </div>
 `)
	//line templates/page.qtpl:41
	templates.StreamJS(qw422016)
	//line templates/page.qtpl:41
	qw422016.N().S(`
</body>
`)
//line templates/page.qtpl:43
}

//line templates/page.qtpl:43
func WritePage(qq422016 qtio422016.Writer, state State) {
	//line templates/page.qtpl:43
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line templates/page.qtpl:43
	StreamPage(qw422016, state)
	//line templates/page.qtpl:43
	qt422016.ReleaseWriter(qw422016)
//line templates/page.qtpl:43
}

//line templates/page.qtpl:43
func Page(state State) string {
	//line templates/page.qtpl:43
	qb422016 := qt422016.AcquireByteBuffer()
	//line templates/page.qtpl:43
	WritePage(qb422016, state)
	//line templates/page.qtpl:43
	qs422016 := string(qb422016.B)
	//line templates/page.qtpl:43
	qt422016.ReleaseByteBuffer(qb422016)
	//line templates/page.qtpl:43
	return qs422016
//line templates/page.qtpl:43
}
