
	Output tags` verification.

	
	Embedded func template:
		plain: 
	Page's header: Header
	Body: <b>
	S=&quot;foobar&quot;
</b>

		html-escaped: 
	Page&#39;s header: Header
	Body: &lt;b&gt;
	S=&amp;quot;foobar&amp;quot;
&lt;/b&gt;

		url-escaped: %0A%09Page%27s+header%3A+Header%0A%09Body%3A+%3Cb%3E%0A%09S%3D%26quot%3Bfoobar%26quot%3B%0A%3C%2Fb%3E%0A
		quoted json string: "\n\tPage\u0027s header: Header\n\tBody: \u003cb>\n\tS=&quot;foobar&quot;\n\u003c/b>\n"
		unquoted json string: \n\tPage\u0027s header: Header\n\tBody: \u003cb>\n\tS=&quot;foobar&quot;\n\u003c/b>\n
		html-escaped url-escaped: %0A%09Page%27s+header%3A+Header%0A%09Body%3A+%3Cb%3E%0A%09S%3D%26quot%3Bfoobar%26quot%3B%0A%3C%2Fb%3E%0A
		html-escaped quoted json string: &quot;\n\tPage\u0027s header: Header\n\tBody: \u003cb&gt;\n\tS=&amp;quot;foobar&amp;quot;\n\u003c/b&gt;\n&quot;
		html-escaped unquoted json string: \n\tPage\u0027s header: Header\n\tBody: \u003cb&gt;\n\tS=&amp;quot;foobar&amp;quot;\n\u003c/b&gt;\n

	Html-escaped output tags:
	<ul>
		<li>&lt;b&gt;html-escaped `string&lt;/b&gt;</li>
		<li>&lt;b&gt;html-escaped `byte slice&lt;/b&gt;</li>
		<li>Int: 42</li>
		<li>Float: 3.14</li>
		<li>&quot;\u003cquoted&gt; \&quot;json\&quot;\n\t\t\t\tstring&quot;</li>
		<li>alert("foo \&quot;json\&quot;-safe\n\t\t\t\t\u003cstring&gt; aa" + 'bar \u0027;alert(\&quot;evil\&quot;)\u003c/script&gt;')</li>
		<li><a href="?%D0%BA%D0%BB%D1%8E%D1%87=%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%26%3D%3F123">test</a></li>
		<li>{&lt;b&gt;foobar`&lt;/b&gt;}</li>
	</ul>

	Output tags without html escaping
	<ul>
		<li><b>html-escaped `string</b></li>
		<li><b>html-escaped `byte slice</b></li>
		<li>Int: 42</li>
		<li>Float: 3.14</li>
		<li>"\u003cquoted> \"json\"\n\t\t\t\tstring"</li>
		<li>alert("foo \"json\"-safe\n\t\t\t\t\u003cstring> aa" + 'bar \u0027;alert(\"evil\")\u003c/script>')</li>
		<li><a href="?%D0%BA%D0%BB%D1%8E%D1%87=%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%26%3D%3F123">test</a></li>
		<li>{<b>foobar`</b>}</li>
	</ul>

	Strip space between lines and tags
			Tags aren't parsed {%inside %}
			plain
		

	Collapse space  between 
lines and tags s = fooBar Baz 

	This is a template for integration test.
It should contains all the quicktemplate stuff.

{% import "fmt" %}

{% func Integration() %}
	Output tags` verification.

	{% code
		p := &integrationPage{
			S: "foobar",
		}
	%}
	Embedded func template:
		plain: {%= embeddedFunc(p) %}
		html-escaped: {%=h embeddedFunc(p) %}
		url-escaped: {%=u embeddedFunc(p) %}
		quoted json string: {%=q embeddedFunc(p) %}
		unquoted json string: {%=j embeddedFunc(p) %}
		html-escaped url-escaped: {%=uh embeddedFunc(p) %}
		html-escaped quoted json string: {%=qh embeddedFunc(p) %}
		html-escaped unquoted json string: {%=jh embeddedFunc(p) %}

	Html-escaped output tags:
	<ul>
		<li>{%s "<b>html-escaped `string</b>" %}</li>
		<li>{%z []byte("<b>html-escaped `byte slice</b>") %}</li>
		<li>Int: {%d 42 %}</li>
		<li>Float: {%f 3.14 %}</li>
		<li>{%q `<quoted> "json"
				string` %}</li>
		<li>alert("foo {%j `"json"-safe
				<string>` %} aa" + 'bar {%j `';alert("evil")</script>` %}')</li>
		<li><a href="?{%u "ключ" %}={%u "значение&=?123" %}">test</a></li>
		<li>{%v struct{ A string }{A: "<b>foobar`</b>"} %}</li>
	</ul>

	Output tags without html escaping
	<ul>
		<li>{%s= "<b>html-escaped `string</b>" %}</li>
		<li>{%z= []byte("<b>html-escaped `byte slice</b>") %}</li>
		<li>Int: {%d= 42 %}</li>
		<li>Float: {%f= 3.14 %}</li>
		<li>{%q= `<quoted> "json"
				string` %}</li>
		<li>alert("foo {%j= `"json"-safe
				<string>` %} aa" + 'bar {%j= `';alert("evil")</script>` %}')</li>
		<li><a href="?{%u= "ключ" %}={%u= "значение&=?123" %}">test</a></li>
		<li>{%v= struct{ A string }{A: "<b>foobar`</b>"} %}</li>
	</ul>

	{% stripspace %}
		Strip space {%space%}
		between lines and tags
		{%plain%}
			Tags aren't parsed {%inside %}
			plain
		{%endplain%}
		{% code // one-liner comment %}
		{% code
		// multi-line
		// comment
		%}
		{% code
		/*
		  yet another
		  multi-line comment
		*/
		%}
	{% endstripspace %}

	{% collapsespace %}
		Collapse space {%space %}
		between {%newline%} lines and tags
		{%comment%}
			Comments {%are%}
			ignored
		{%endcomment%}

		{% for _, s := range []string{"foo","bar","baz"} %}
			{% if s == "bar" %}
				Bar
			{% elseif s == "baz" %}
				Baz
				{% break %}
			{% else %}
				{% if s == "never" %}
					{% return %}
				{% endif %}

				{% switch s %}
				{% case "foobar" %}
					s = foobar
				{% case "barbaz" %}
					s = barbaz
				{% default %}
					s = {%s s %}
				{% endswitch %}

				{% continue %}
			{% endif %}
		{% endfor %}
	{% endcollapsespace %}

	{% cat "integration.qtpl" %}

	tail of the func
{% endfunc %}

{%
interface Page {
	Header()
	Body()
}
%}

{% func embeddedFunc(p Page) %}
	Page's header: {%= p.Header() %}
	Body: {%s= fmt.Sprintf("<b>%s</b>", p.Body()) %}
{% endfunc %}

{% code
type integrationPage struct {
	S string
}
%}

{% func (p *integrationPage) Header() %}Header{% endfunc %}

{% func (p *integrationPage) Body() %}
	S={%q p.S %}
{% endfunc %}


	tail of the func
